--- User Defined Observations ---------------------------------------

  --- Definition of triangle sort
  sort Triangle .
  sort TriangleList .
  subsort Triangle < TriangleList .

  op triangle : EBPair EBPair EBPair -> Triangle [ctor] .
  op emptyList : -> TriangleList [ctor] .
  op _,_ : TriangleList TriangleList -> TriangleList [ctor assoc comm id: emptyList] .

  --- Set of all triangles (harcoded for the moment)

  op allTriangles : -> TriangleList .
  eq allTriangles = ( triangle(elt("a") |-> elt("b"), elt("b") |-> elt("c"), elt("a") |-> elt("c")), --- (a,b,c)
                      triangle(elt("a") |-> elt("b"), elt("b") |-> elt("d"), elt("a") |-> elt("d")), --- (a,b,d)
                      triangle(elt("a") |-> elt("b"), elt("b") |-> elt("e"), elt("a") |-> elt("e")), --- (a,b,e)
                      triangle(elt("a") |-> elt("c"), elt("c") |-> elt("d"), elt("a") |-> elt("d")), --- (a,c,d)
                      triangle(elt("a") |-> elt("c"), elt("c") |-> elt("e"), elt("a") |-> elt("e")), --- (a,c,e)
                      triangle(elt("a") |-> elt("d"), elt("d") |-> elt("e"), elt("a") |-> elt("e")), --- (a,d,e)
                      triangle(elt("b") |-> elt("c"), elt("c") |-> elt("d"), elt("b") |-> elt("d")), --- (b,c,d)
                      triangle(elt("b") |-> elt("c"), elt("c") |-> elt("e"), elt("b") |-> elt("e")), --- (b,c,e)
                      triangle(elt("b") |-> elt("d"), elt("d") |-> elt("e"), elt("b") |-> elt("e")), --- (b,d,e)
                      triangle(elt("c") |-> elt("d"), elt("d") |-> elt("e"), elt("c") |-> elt("e"))  --- (c,d,e)
                    ) .

  --- Balanced triangle property 
  vars E1 E2 E3 : EBPair .
  vars Rpos Rneg : EBRel .  

  op is-balanced : Triangle EBRel EBRel -> Bool .
  eq is-balanced(triangle(E1, E2, E3), Rpos, Rneg) = if ( (E1 in Rpos) and (E2 in Rpos) and (E3 in Rpos) ) or --- (+,+,+)
                                                        ( (E1 in Rpos) and (E2 in Rneg) and (E3 in Rneg) ) or --- (+,-,-)
                                                        ( (E1 in Rneg) and (E2 in Rpos) and (E3 in Rneg) ) or --- (-,+,-)
                                                        ( (E1 in Rneg) and (E2 in Rneg) and (E3 in Rpos) )    --- (-,-,+)
                                                     then true else false fi .

  --- Balanced graph
  var t : Triangle .
  var TL : TriangleList .

  op Balanced : TriangleList EBRel EBRel -> Float .
  eq Balanced(emptyList, Rpos, Rneg) = 1.0 . --- if reaches end, then is balanced
  eq Balanced((t, TL), Rpos, Rneg) = if is-balanced(t, Rpos, Rneg) then Balanced(TL, Rpos, Rneg) else 0.0 fi .

  --- auxiliary function to get an equation
  var R : EBRel .
  op getRel : EBType -> EBRel .
  eq getRel(val(R)) = R .

  eq val("balanced", {Conf < $$MNAME : Machine | variables: ('AgentsComb |-> $$AgentsComb , 'Rpositive |-> $$Rpositive , 'Rnegative |-> $$Rnegative) >} {gt | SL}  ) 
  = Balanced(allTriangles, getRel($$Rpositive), getRel($$Rnegative)) .
  --- -----------------------------------------------------------------