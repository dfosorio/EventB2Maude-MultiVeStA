
--- Module generated by B2Maude (2022-12-20)
--- Context: 
--- Machine: 

--- MAX-STEPS for the simulation: 10000

load ./m-theory/ebmachine .

mod ctxDiceProgram2 is
  inc EBMACHINE .
  pr APMAUDE .

  --- Context: Sets and constants
  eq init-sets = 
   ('STATES |-> gen-set(("s0" "s1" "s2" "s3" "s4" "s5" "s6" "s7" "s8" "s9" "s10" "s11" "s12" "s13" "s14" "s15" "s16" "s17" "s18" "s19" "s20" "s21" "s22" "s23" "s24" "s25" "s26" "s27" "s28" "s29" "s30" "s31" "s32" "s33" "s34")))
  .

  eq init-constants = 
  empty 
  .

--- ===============================

--- VARIABLES 
 var $$st : EBType .
 var $$diceSum : EBType .

--- CONSTANTS 

vars $$CNAME $$MNAME : Qid .
vars $$LEv $$LEv' : LEvent .
var  $$Sets : Map{Qid, EBSet} .
var  $$Cte  : Map{Qid, EBType} .
var  $$WEIGHT : Nat .
var  $$GUARD :  Bool . 

--- ===============================

  eq init-variables(  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > )
   =
    ('st |-> val(elt("s0"))),
   ('diceSum |-> val(elt(0))) .


----------------------------
--- Event State0Trans
----------------------------

--- Activation of the Event State0Trans
ceq [State0Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State0Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State0Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State0Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s0")))) 
.

--- Change of state for event State0Trans
rl [State0Trans] :
    {gt | SL} ($$MNAME <- RuleState0Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State0Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> choice( val(elt("s1")) @ 0.5  val(elt("s2")) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State1Trans
----------------------------

--- Activation of the Event State1Trans
ceq [State1Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State1Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State1Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State1Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s1")))) 
.

--- Change of state for event State1Trans
rl [State1Trans] :
    {gt | SL} ($$MNAME <- RuleState1Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State1Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> choice( val(elt("s3")) @ 0.5  val(elt("s4")) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State2Trans
----------------------------

--- Activation of the Event State2Trans
ceq [State2Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State2Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State2Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State2Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s2")))) 
.

--- Change of state for event State2Trans
rl [State2Trans] :
    {gt | SL} ($$MNAME <- RuleState2Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State2Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> choice( val(elt("s5")) @ 0.5  val(elt("s6")) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State3Trans1
----------------------------

--- Activation of the Event State3Trans1
ceq [State3Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State3Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State3Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State3Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s3")))) 
.

--- Change of state for event State3Trans1
rl [State3Trans1] :
    {gt | SL} ($$MNAME <- RuleState3Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State3Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s7"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State3Trans2
----------------------------

--- Activation of the Event State3Trans2
ceq [State3Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State3Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State3Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State3Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s3")))) 
.

--- Change of state for event State3Trans2
rl [State3Trans2] :
    {gt | SL} ($$MNAME <- RuleState3Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State3Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(6))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State4Trans1
----------------------------

--- Activation of the Event State4Trans1
ceq [State4Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State4Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State4Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State4Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s4")))) 
.

--- Change of state for event State4Trans1
rl [State4Trans1] :
    {gt | SL} ($$MNAME <- RuleState4Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State4Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s8"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State4Trans2
----------------------------

--- Activation of the Event State4Trans2
ceq [State4Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State4Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State4Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State4Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s4")))) 
.

--- Change of state for event State4Trans2
rl [State4Trans2] :
    {gt | SL} ($$MNAME <- RuleState4Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State4Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(7))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State5Trans1
----------------------------

--- Activation of the Event State5Trans1
ceq [State5Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State5Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State5Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State5Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s5")))) 
.

--- Change of state for event State5Trans1
rl [State5Trans1] :
    {gt | SL} ($$MNAME <- RuleState5Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State5Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s9"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State5Trans2
----------------------------

--- Activation of the Event State5Trans2
ceq [State5Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State5Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State5Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State5Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s5")))) 
.

--- Change of state for event State5Trans2
rl [State5Trans2] :
    {gt | SL} ($$MNAME <- RuleState5Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State5Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(8))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State6Trans
----------------------------

--- Activation of the Event State6Trans
ceq [State6Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State6Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State6Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State6Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s6")))) 
.

--- Change of state for event State6Trans
rl [State6Trans] :
    {gt | SL} ($$MNAME <- RuleState6Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State6Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> choice( val(elt("s10")) @ 0.5  val(elt("s11")) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State7Trans1
----------------------------

--- Activation of the Event State7Trans1
ceq [State7Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State7Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State7Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State7Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s7")))) 
.

--- Change of state for event State7Trans1
rl [State7Trans1] :
    {gt | SL} ($$MNAME <- RuleState7Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State7Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s12"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State7Trans2
----------------------------

--- Activation of the Event State7Trans2
ceq [State7Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State7Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State7Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State7Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s7")))) 
.

--- Change of state for event State7Trans2
rl [State7Trans2] :
    {gt | SL} ($$MNAME <- RuleState7Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State7Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(4))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State8Trans1
----------------------------

--- Activation of the Event State8Trans1
ceq [State8Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State8Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State8Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State8Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s8")))) 
.

--- Change of state for event State8Trans1
rl [State8Trans1] :
    {gt | SL} ($$MNAME <- RuleState8Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State8Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s13"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State8Trans2
----------------------------

--- Activation of the Event State8Trans2
ceq [State8Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State8Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State8Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State8Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s8")))) 
.

--- Change of state for event State8Trans2
rl [State8Trans2] :
    {gt | SL} ($$MNAME <- RuleState8Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State8Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(5))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State9Trans1
----------------------------

--- Activation of the Event State9Trans1
ceq [State9Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State9Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State9Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State9Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s9")))) 
.

--- Change of state for event State9Trans1
rl [State9Trans1] :
    {gt | SL} ($$MNAME <- RuleState9Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State9Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s14"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State9Trans2
----------------------------

--- Activation of the Event State9Trans2
ceq [State9Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State9Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State9Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State9Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s9")))) 
.

--- Change of state for event State9Trans2
rl [State9Trans2] :
    {gt | SL} ($$MNAME <- RuleState9Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State9Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(9))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State10Trans1
----------------------------

--- Activation of the Event State10Trans1
ceq [State10Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State10Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State10Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State10Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s10")))) 
.

--- Change of state for event State10Trans1
rl [State10Trans1] :
    {gt | SL} ($$MNAME <- RuleState10Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State10Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s15"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State10Trans2
----------------------------

--- Activation of the Event State10Trans2
ceq [State10Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State10Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State10Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State10Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s10")))) 
.

--- Change of state for event State10Trans2
rl [State10Trans2] :
    {gt | SL} ($$MNAME <- RuleState10Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State10Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(10))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State11Trans
----------------------------

--- Activation of the Event State11Trans
ceq [State11Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State11Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State11Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State11Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s11")))) 
.

--- Change of state for event State11Trans
rl [State11Trans] :
    {gt | SL} ($$MNAME <- RuleState11Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State11Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> choice( val(elt("s16")) @ 0.5  val(elt("s17")) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State12Trans1
----------------------------

--- Activation of the Event State12Trans1
ceq [State12Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State12Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State12Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State12Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s12")))) 
.

--- Change of state for event State12Trans1
rl [State12Trans1] :
    {gt | SL} ($$MNAME <- RuleState12Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State12Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s18"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State12Trans2
----------------------------

--- Activation of the Event State12Trans2
ceq [State12Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State12Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State12Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State12Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s12")))) 
.

--- Change of state for event State12Trans2
rl [State12Trans2] :
    {gt | SL} ($$MNAME <- RuleState12Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State12Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(3))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State13Trans1
----------------------------

--- Activation of the Event State13Trans1
ceq [State13Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State13Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State13Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State13Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s13")))) 
.

--- Change of state for event State13Trans1
rl [State13Trans1] :
    {gt | SL} ($$MNAME <- RuleState13Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State13Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s19"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State13Trans2
----------------------------

--- Activation of the Event State13Trans2
ceq [State13Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State13Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State13Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State13Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s13")))) 
.

--- Change of state for event State13Trans2
rl [State13Trans2] :
    {gt | SL} ($$MNAME <- RuleState13Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State13Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(5))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State14Trans1
----------------------------

--- Activation of the Event State14Trans1
ceq [State14Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State14Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State14Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State14Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s14")))) 
.

--- Change of state for event State14Trans1
rl [State14Trans1] :
    {gt | SL} ($$MNAME <- RuleState14Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State14Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s20"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State14Trans2
----------------------------

--- Activation of the Event State14Trans2
ceq [State14Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State14Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State14Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State14Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s14")))) 
.

--- Change of state for event State14Trans2
rl [State14Trans2] :
    {gt | SL} ($$MNAME <- RuleState14Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State14Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(7))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State15Trans1
----------------------------

--- Activation of the Event State15Trans1
ceq [State15Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State15Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State15Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State15Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s15")))) 
.

--- Change of state for event State15Trans1
rl [State15Trans1] :
    {gt | SL} ($$MNAME <- RuleState15Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State15Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s21"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State15Trans2
----------------------------

--- Activation of the Event State15Trans2
ceq [State15Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State15Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State15Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State15Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s15")))) 
.

--- Change of state for event State15Trans2
rl [State15Trans2] :
    {gt | SL} ($$MNAME <- RuleState15Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State15Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(9))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State16Trans1
----------------------------

--- Activation of the Event State16Trans1
ceq [State16Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State16Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State16Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State16Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s16")))) 
.

--- Change of state for event State16Trans1
rl [State16Trans1] :
    {gt | SL} ($$MNAME <- RuleState16Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State16Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s22"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State16Trans2
----------------------------

--- Activation of the Event State16Trans2
ceq [State16Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State16Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State16Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State16Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s16")))) 
.

--- Change of state for event State16Trans2
rl [State16Trans2] :
    {gt | SL} ($$MNAME <- RuleState16Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State16Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(11))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State17Trans
----------------------------

--- Activation of the Event State17Trans
ceq [State17Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State17Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State17Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State17Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s17")))) 
.

--- Change of state for event State17Trans
rl [State17Trans] :
    {gt | SL} ($$MNAME <- RuleState17Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State17Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> choice( val(elt("s23")) @ 0.5  val(elt("s24")) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State18Trans1
----------------------------

--- Activation of the Event State18Trans1
ceq [State18Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State18Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State18Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State18Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s18")))) 
.

--- Change of state for event State18Trans1
rl [State18Trans1] :
    {gt | SL} ($$MNAME <- RuleState18Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State18Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s25"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State18Trans2
----------------------------

--- Activation of the Event State18Trans2
ceq [State18Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State18Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State18Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State18Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s18")))) 
.

--- Change of state for event State18Trans2
rl [State18Trans2] :
    {gt | SL} ($$MNAME <- RuleState18Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State18Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(2))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State19Trans1
----------------------------

--- Activation of the Event State19Trans1
ceq [State19Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State19Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State19Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State19Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s19")))) 
.

--- Change of state for event State19Trans1
rl [State19Trans1] :
    {gt | SL} ($$MNAME <- RuleState19Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State19Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s26"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State19Trans2
----------------------------

--- Activation of the Event State19Trans2
ceq [State19Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State19Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State19Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State19Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s19")))) 
.

--- Change of state for event State19Trans2
rl [State19Trans2] :
    {gt | SL} ($$MNAME <- RuleState19Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State19Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(3))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State20Trans1
----------------------------

--- Activation of the Event State20Trans1
ceq [State20Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State20Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State20Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State20Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s20")))) 
.

--- Change of state for event State20Trans1
rl [State20Trans1] :
    {gt | SL} ($$MNAME <- RuleState20Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State20Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s27"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State20Trans2
----------------------------

--- Activation of the Event State20Trans2
ceq [State20Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State20Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State20Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State20Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s20")))) 
.

--- Change of state for event State20Trans2
rl [State20Trans2] :
    {gt | SL} ($$MNAME <- RuleState20Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State20Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(4))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State21Trans
----------------------------

--- Activation of the Event State21Trans
ceq [State21Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State21Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State21Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State21Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s21")))) 
.

--- Change of state for event State21Trans
rl [State21Trans] :
    {gt | SL} ($$MNAME <- RuleState21Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State21Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> choice( val(elt(5)) @ 0.5  val(elt(9)) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State22Trans1
----------------------------

--- Activation of the Event State22Trans1
ceq [State22Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State22Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State22Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State22Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s22")))) 
.

--- Change of state for event State22Trans1
rl [State22Trans1] :
    {gt | SL} ($$MNAME <- RuleState22Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State22Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s28"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State22Trans2
----------------------------

--- Activation of the Event State22Trans2
ceq [State22Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State22Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State22Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State22Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s22")))) 
.

--- Change of state for event State22Trans2
rl [State22Trans2] :
    {gt | SL} ($$MNAME <- RuleState22Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State22Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(10))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State23Trans1
----------------------------

--- Activation of the Event State23Trans1
ceq [State23Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State23Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State23Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State23Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s23")))) 
.

--- Change of state for event State23Trans1
rl [State23Trans1] :
    {gt | SL} ($$MNAME <- RuleState23Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State23Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s29"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State23Trans2
----------------------------

--- Activation of the Event State23Trans2
ceq [State23Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State23Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State23Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State23Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s23")))) 
.

--- Change of state for event State23Trans2
rl [State23Trans2] :
    {gt | SL} ($$MNAME <- RuleState23Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State23Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(11))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State24Trans1
----------------------------

--- Activation of the Event State24Trans1
ceq [State24Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State24Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State24Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State24Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s24")))) 
.

--- Change of state for event State24Trans1
rl [State24Trans1] :
    {gt | SL} ($$MNAME <- RuleState24Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State24Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s30"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State24Trans2
----------------------------

--- Activation of the Event State24Trans2
ceq [State24Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State24Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State24Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State24Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s24")))) 
.

--- Change of state for event State24Trans2
rl [State24Trans2] :
    {gt | SL} ($$MNAME <- RuleState24Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State24Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(12))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State25Trans1
----------------------------

--- Activation of the Event State25Trans1
ceq [State25Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State25Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State25Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State25Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s25")))) 
.

--- Change of state for event State25Trans1
rl [State25Trans1] :
    {gt | SL} ($$MNAME <- RuleState25Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State25Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s1"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State25Trans2
----------------------------

--- Activation of the Event State25Trans2
ceq [State25Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State25Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State25Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State25Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s25")))) 
.

--- Change of state for event State25Trans2
rl [State25Trans2] :
    {gt | SL} ($$MNAME <- RuleState25Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State25Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(2))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State26Trans1
----------------------------

--- Activation of the Event State26Trans1
ceq [State26Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State26Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State26Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State26Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s26")))) 
.

--- Change of state for event State26Trans1
rl [State26Trans1] :
    {gt | SL} ($$MNAME <- RuleState26Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State26Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s31"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State26Trans2
----------------------------

--- Activation of the Event State26Trans2
ceq [State26Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State26Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State26Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State26Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s26")))) 
.

--- Change of state for event State26Trans2
rl [State26Trans2] :
    {gt | SL} ($$MNAME <- RuleState26Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State26Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(3))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State27Trans1
----------------------------

--- Activation of the Event State27Trans1
ceq [State27Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State27Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State27Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State27Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s27")))) 
.

--- Change of state for event State27Trans1
rl [State27Trans1] :
    {gt | SL} ($$MNAME <- RuleState27Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State27Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s32"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State27Trans2
----------------------------

--- Activation of the Event State27Trans2
ceq [State27Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State27Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State27Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State27Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s27")))) 
.

--- Change of state for event State27Trans2
rl [State27Trans2] :
    {gt | SL} ($$MNAME <- RuleState27Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State27Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(6))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State28Trans
----------------------------

--- Activation of the Event State28Trans
ceq [State28Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State28Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State28Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State28Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s28")))) 
.

--- Change of state for event State28Trans
rl [State28Trans] :
    {gt | SL} ($$MNAME <- RuleState28Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State28Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> choice( val(elt(7)) @ 0.5  val(elt(8)) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State29Trans1
----------------------------

--- Activation of the Event State29Trans1
ceq [State29Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State29Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State29Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State29Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s29")))) 
.

--- Change of state for event State29Trans1
rl [State29Trans1] :
    {gt | SL} ($$MNAME <- RuleState29Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State29Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s33"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State29Trans2
----------------------------

--- Activation of the Event State29Trans2
ceq [State29Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State29Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State29Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State29Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s29")))) 
.

--- Change of state for event State29Trans2
rl [State29Trans2] :
    {gt | SL} ($$MNAME <- RuleState29Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State29Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(11))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State30Trans1
----------------------------

--- Activation of the Event State30Trans1
ceq [State30Trans1] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State30Trans1, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State30Trans1, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State30Trans1, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s30")))) 
.

--- Change of state for event State30Trans1
rl [State30Trans1] :
    {gt | SL} ($$MNAME <- RuleState30Trans1) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State30Trans1, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('diceSum |-> $$diceSum , 'st |-> val(elt("s2"))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State30Trans2
----------------------------

--- Activation of the Event State30Trans2
ceq [State30Trans2] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State30Trans2, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State30Trans2, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State30Trans2, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s30")))) 
.

--- Change of state for event State30Trans2
rl [State30Trans2] :
    {gt | SL} ($$MNAME <- RuleState30Trans2) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State30Trans2, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> val(elt(12))) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State31Trans
----------------------------

--- Activation of the Event State31Trans
ceq [State31Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State31Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State31Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State31Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s31")))) 
.

--- Change of state for event State31Trans
rl [State31Trans] :
    {gt | SL} ($$MNAME <- RuleState31Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State31Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> choice( val(elt(2)) @ 0.5  val(elt(4)) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State32Trans
----------------------------

--- Activation of the Event State32Trans
ceq [State32Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State32Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State32Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State32Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s32")))) 
.

--- Change of state for event State32Trans
rl [State32Trans] :
    {gt | SL} ($$MNAME <- RuleState32Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State32Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> choice( val(elt(6)) @ 0.5  val(elt(8)) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


----------------------------
--- Event State33Trans
----------------------------

--- Activation of the Event State33Trans
ceq [State33Trans] :
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ($$LEv ev('State33Trans, unknown) $$LEv') >
    =
    < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    if $$WEIGHT > 0 and $$GUARD == true
    then 
    < events  : Events  | state: ($$LEv ev('State33Trans, enable($$WEIGHT)) $$LEv') >
    else
    < events  : Events  | state: ($$LEv ev('State33Trans, blocked) $$LEv') >
    fi
if      $$WEIGHT := ebset2nat(val(elt(1))) 
     /\ $$GUARD  := ebset2bool(($$st) =b (val(elt("s33")))) 
.

--- Change of state for event State33Trans
rl [State33Trans] :
    {gt | SL} ($$MNAME <- RuleState33Trans) 
    {< $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
  < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
    < events  : Events  | state: ( ev('State33Trans, execute) ) >
    randomCounter(myCounter)}
    =>
    {gt | SL}
    {  < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> val(elt("s34")) , 'diceSum |-> choice( val(elt(10)) @ 0.5  val(elt(12)) @ 0.5, myCounter)) > 
    < events : Events | state: init-events >
    randomCounter(myCounter)}
    .


  --- Initialization of events
  eq init-events = ev('State0Trans, unknown) ev('State1Trans, unknown) ev('State2Trans, unknown) ev('State3Trans1, unknown) ev('State3Trans2, unknown) ev('State4Trans1, unknown) ev('State4Trans2, unknown) ev('State5Trans1, unknown) ev('State5Trans2, unknown) ev('State6Trans, unknown) ev('State7Trans1, unknown) ev('State7Trans2, unknown) ev('State8Trans1, unknown) ev('State8Trans2, unknown) ev('State9Trans1, unknown) ev('State9Trans2, unknown) ev('State10Trans1, unknown) ev('State10Trans2, unknown) ev('State11Trans, unknown) ev('State12Trans1, unknown) ev('State12Trans2, unknown) ev('State13Trans1, unknown) ev('State13Trans2, unknown) ev('State14Trans1, unknown) ev('State14Trans2, unknown) ev('State15Trans1, unknown) ev('State15Trans2, unknown) ev('State16Trans1, unknown) ev('State16Trans2, unknown) ev('State17Trans, unknown) ev('State18Trans1, unknown) ev('State18Trans2, unknown) ev('State19Trans1, unknown) ev('State19Trans2, unknown) ev('State20Trans1, unknown) ev('State20Trans2, unknown) ev('State21Trans, unknown) ev('State22Trans1, unknown) ev('State22Trans2, unknown) ev('State23Trans1, unknown) ev('State23Trans2, unknown) ev('State24Trans1, unknown) ev('State24Trans2, unknown) ev('State25Trans1, unknown) ev('State25Trans2, unknown) ev('State26Trans1, unknown) ev('State26Trans2, unknown) ev('State27Trans1, unknown) ev('State27Trans2, unknown) ev('State28Trans, unknown) ev('State29Trans1, unknown) ev('State29Trans2, unknown) ev('State30Trans1, unknown) ev('State30Trans2, unknown) ev('State31Trans, unknown) ev('State32Trans, unknown) ev('State33Trans, unknown) .

  --- Rule for choosing the next event to be executed
  --- It stops when the system is in a deadlock or the limit 
  --- MAX-STEPS is reached.
  op MAX-STEPS : -> Float .
  eq MAX-STEPS = 10000.0 .

  --- variables used for Multivesta processes
  var gt : Float .  
  var SL : ScheduleList .
  vars Conf : Configuration .
  var myCounter : Nat . --- counter variable used to generate random numbers

  crl [next-event] :
     {Conf < events : Events | state: ($$LEv) > randomCounter(myCounter)} {gt | SL} 
     =>
     scheduleEvent({ Conf < events : Events | state: choose-event($$LEv', s(myCounter)) > randomCounter(s(myCounter))} {gt | SL}) 
  if
        gt <= MAX-STEPS
    /\  not-unknown($$LEv) --- all the guards have been checked
    /\  one-firable($$LEv) --- one of the events is firable
    /\  $$LEv' := accumulate(enabled-events($$LEv)) --- extract the enabled events and accumulate
  .

  --- ---------------------------------------------------------------
  --- MultiVeStA ----------------------------------------------------
  --- ---------------------------------------------------------------

  --- Contents -------------------------------------------------------

  op qidToContent : Qid -> Content .


op RuleState0Trans : -> Content [ ctor ] .
op RuleState1Trans : -> Content [ ctor ] .
op RuleState2Trans : -> Content [ ctor ] .
op RuleState3Trans1 : -> Content [ ctor ] .
op RuleState3Trans2 : -> Content [ ctor ] .
op RuleState4Trans1 : -> Content [ ctor ] .
op RuleState4Trans2 : -> Content [ ctor ] .
op RuleState5Trans1 : -> Content [ ctor ] .
op RuleState5Trans2 : -> Content [ ctor ] .
op RuleState6Trans : -> Content [ ctor ] .
op RuleState7Trans1 : -> Content [ ctor ] .
op RuleState7Trans2 : -> Content [ ctor ] .
op RuleState8Trans1 : -> Content [ ctor ] .
op RuleState8Trans2 : -> Content [ ctor ] .
op RuleState9Trans1 : -> Content [ ctor ] .
op RuleState9Trans2 : -> Content [ ctor ] .
op RuleState10Trans1 : -> Content [ ctor ] .
op RuleState10Trans2 : -> Content [ ctor ] .
op RuleState11Trans : -> Content [ ctor ] .
op RuleState12Trans1 : -> Content [ ctor ] .
op RuleState12Trans2 : -> Content [ ctor ] .
op RuleState13Trans1 : -> Content [ ctor ] .
op RuleState13Trans2 : -> Content [ ctor ] .
op RuleState14Trans1 : -> Content [ ctor ] .
op RuleState14Trans2 : -> Content [ ctor ] .
op RuleState15Trans1 : -> Content [ ctor ] .
op RuleState15Trans2 : -> Content [ ctor ] .
op RuleState16Trans1 : -> Content [ ctor ] .
op RuleState16Trans2 : -> Content [ ctor ] .
op RuleState17Trans : -> Content [ ctor ] .
op RuleState18Trans1 : -> Content [ ctor ] .
op RuleState18Trans2 : -> Content [ ctor ] .
op RuleState19Trans1 : -> Content [ ctor ] .
op RuleState19Trans2 : -> Content [ ctor ] .
op RuleState20Trans1 : -> Content [ ctor ] .
op RuleState20Trans2 : -> Content [ ctor ] .
op RuleState21Trans : -> Content [ ctor ] .
op RuleState22Trans1 : -> Content [ ctor ] .
op RuleState22Trans2 : -> Content [ ctor ] .
op RuleState23Trans1 : -> Content [ ctor ] .
op RuleState23Trans2 : -> Content [ ctor ] .
op RuleState24Trans1 : -> Content [ ctor ] .
op RuleState24Trans2 : -> Content [ ctor ] .
op RuleState25Trans1 : -> Content [ ctor ] .
op RuleState25Trans2 : -> Content [ ctor ] .
op RuleState26Trans1 : -> Content [ ctor ] .
op RuleState26Trans2 : -> Content [ ctor ] .
op RuleState27Trans1 : -> Content [ ctor ] .
op RuleState27Trans2 : -> Content [ ctor ] .
op RuleState28Trans : -> Content [ ctor ] .
op RuleState29Trans1 : -> Content [ ctor ] .
op RuleState29Trans2 : -> Content [ ctor ] .
op RuleState30Trans1 : -> Content [ ctor ] .
op RuleState30Trans2 : -> Content [ ctor ] .
op RuleState31Trans : -> Content [ ctor ] .
op RuleState32Trans : -> Content [ ctor ] .
op RuleState33Trans : -> Content [ ctor ] .

eq qidToContent('State0Trans) =  RuleState0Trans .
eq qidToContent('State1Trans) =  RuleState1Trans .
eq qidToContent('State2Trans) =  RuleState2Trans .
eq qidToContent('State3Trans1) =  RuleState3Trans1 .
eq qidToContent('State3Trans2) =  RuleState3Trans2 .
eq qidToContent('State4Trans1) =  RuleState4Trans1 .
eq qidToContent('State4Trans2) =  RuleState4Trans2 .
eq qidToContent('State5Trans1) =  RuleState5Trans1 .
eq qidToContent('State5Trans2) =  RuleState5Trans2 .
eq qidToContent('State6Trans) =  RuleState6Trans .
eq qidToContent('State7Trans1) =  RuleState7Trans1 .
eq qidToContent('State7Trans2) =  RuleState7Trans2 .
eq qidToContent('State8Trans1) =  RuleState8Trans1 .
eq qidToContent('State8Trans2) =  RuleState8Trans2 .
eq qidToContent('State9Trans1) =  RuleState9Trans1 .
eq qidToContent('State9Trans2) =  RuleState9Trans2 .
eq qidToContent('State10Trans1) =  RuleState10Trans1 .
eq qidToContent('State10Trans2) =  RuleState10Trans2 .
eq qidToContent('State11Trans) =  RuleState11Trans .
eq qidToContent('State12Trans1) =  RuleState12Trans1 .
eq qidToContent('State12Trans2) =  RuleState12Trans2 .
eq qidToContent('State13Trans1) =  RuleState13Trans1 .
eq qidToContent('State13Trans2) =  RuleState13Trans2 .
eq qidToContent('State14Trans1) =  RuleState14Trans1 .
eq qidToContent('State14Trans2) =  RuleState14Trans2 .
eq qidToContent('State15Trans1) =  RuleState15Trans1 .
eq qidToContent('State15Trans2) =  RuleState15Trans2 .
eq qidToContent('State16Trans1) =  RuleState16Trans1 .
eq qidToContent('State16Trans2) =  RuleState16Trans2 .
eq qidToContent('State17Trans) =  RuleState17Trans .
eq qidToContent('State18Trans1) =  RuleState18Trans1 .
eq qidToContent('State18Trans2) =  RuleState18Trans2 .
eq qidToContent('State19Trans1) =  RuleState19Trans1 .
eq qidToContent('State19Trans2) =  RuleState19Trans2 .
eq qidToContent('State20Trans1) =  RuleState20Trans1 .
eq qidToContent('State20Trans2) =  RuleState20Trans2 .
eq qidToContent('State21Trans) =  RuleState21Trans .
eq qidToContent('State22Trans1) =  RuleState22Trans1 .
eq qidToContent('State22Trans2) =  RuleState22Trans2 .
eq qidToContent('State23Trans1) =  RuleState23Trans1 .
eq qidToContent('State23Trans2) =  RuleState23Trans2 .
eq qidToContent('State24Trans1) =  RuleState24Trans1 .
eq qidToContent('State24Trans2) =  RuleState24Trans2 .
eq qidToContent('State25Trans1) =  RuleState25Trans1 .
eq qidToContent('State25Trans2) =  RuleState25Trans2 .
eq qidToContent('State26Trans1) =  RuleState26Trans1 .
eq qidToContent('State26Trans2) =  RuleState26Trans2 .
eq qidToContent('State27Trans1) =  RuleState27Trans1 .
eq qidToContent('State27Trans2) =  RuleState27Trans2 .
eq qidToContent('State28Trans) =  RuleState28Trans .
eq qidToContent('State29Trans1) =  RuleState29Trans1 .
eq qidToContent('State29Trans2) =  RuleState29Trans2 .
eq qidToContent('State30Trans1) =  RuleState30Trans1 .
eq qidToContent('State30Trans2) =  RuleState30Trans2 .
eq qidToContent('State31Trans) =  RuleState31Trans .
eq qidToContent('State32Trans) =  RuleState32Trans .
eq qidToContent('State33Trans) =  RuleState33Trans .




  --- ---------------------------------------------------------------

  --- Scheduler Equations --------------------------------------------
  var ruleQid : Qid .
  op scheduleEvent : Configuration -> Configuration .
  eq scheduleEvent( { gt | SL }
                    { < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >  
                      < events  : Events  | state: ( ev(ruleQid, execute) ) > 
                      randomCounter(myCounter)} )
                    =
                    insert({ gt | SL },[ gt + 1.0 , ($$MNAME <- qidToContent(ruleQid)),0])
                    { < $$CNAME : Context | sets: ($$Sets), constants: (empty) > 
    < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) > 
                      < events  : Events  | state: ( ev(ruleQid, execute) ) > 
                      randomCounter(myCounter)} .

  --- -----------------------------------------------------------------

  --- Predefined State Observations -----------------------------------
  --- s.rval("steps") and s.rval("time") return the number of events executed (defined inside MultiVeStA)

  --- s.rval("isMax") returns 1.0 when the simulation's time (i.e number of system transitions 
  --- or executed events) has reached MAX-STEPS, 0.0 otherwise
  eq val("isMax", {Conf} {gt | SL}) = if (gt >= MAX-STEPS) then 1.0 else 0.0 fi .

  --- s.rval("deadlock") returns 1.0 when there are no more enabled events, 0.0 otherwise
  eq val("deadlock", {Conf < events : Events | state: ($$LEv) >} 
                     {gt | SL}) = if (not-unknown($$LEv) and not(one-firable($$LEv))) 
                                                  then 1.0 else 0.0 fi .
  --- -----------------------------------------------------------------

  --- User Defined Observations --------------------------------------- 

eq val("obs1", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(2))))) .

eq val("obs2", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(3))))) .

eq val("obs3", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(4))))) .

eq val("obs4", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(5))))) .

eq val("obs5", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(6))))) .

eq val("obs6", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(7))))) .

eq val("obs7", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(8))))) .

eq val("obs8", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(9))))) .

eq val("obs9", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(10))))) .

eq val("obs10", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(11))))) .

eq val("obs11", {Conf < $$MNAME : Machine | variables: ('st |-> $$st , 'diceSum |-> $$diceSum) >} {gt | SL}  ) 
  = toFloat((($$diceSum) =b (val(elt(12))))) .

  --- -----------------------------------------------------------------


  --- Defining the initial state---------------------------------------
  op init : -> Configuration .
  eq init =  {0.0 | nilSL} init-machine('ctxDiceProgram2, 'DiceProgram2) randomCounter(0) .
  ---------------------------------------------------------------------

endm

eof

