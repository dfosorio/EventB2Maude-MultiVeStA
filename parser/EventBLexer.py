# Generated from EventB.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,65,447,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
        6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,
        1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
        1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,
        1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,
        1,51,1,52,1,52,1,53,1,53,1,54,3,54,377,8,54,1,54,4,54,380,8,54,11,
        54,12,54,381,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,
        58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,402,8,59,1,60,1,60,1,
        61,4,61,407,8,61,11,61,12,61,408,1,61,1,61,1,62,3,62,414,8,62,1,
        62,1,62,4,62,418,8,62,11,62,12,62,419,1,62,1,62,1,63,5,63,425,8,
        63,10,63,12,63,428,9,63,1,63,1,63,5,63,432,8,63,10,63,12,63,435,
        9,63,1,64,1,64,5,64,439,8,64,10,64,12,64,442,9,64,1,64,1,64,1,64,
        1,64,1,440,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,
        127,64,129,65,1,0,6,1,0,48,57,2,0,60,60,62,62,2,0,9,9,32,32,2,0,
        65,90,97,122,5,0,45,45,48,57,65,90,95,95,97,122,2,0,10,10,35,35,
        457,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
        0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,
        119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,
        0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,135,1,0,0,0,7,138,
        1,0,0,0,9,140,1,0,0,0,11,142,1,0,0,0,13,146,1,0,0,0,15,148,1,0,0,
        0,17,150,1,0,0,0,19,153,1,0,0,0,21,155,1,0,0,0,23,157,1,0,0,0,25,
        165,1,0,0,0,27,170,1,0,0,0,29,180,1,0,0,0,31,184,1,0,0,0,33,192,
        1,0,0,0,35,197,1,0,0,0,37,207,1,0,0,0,39,218,1,0,0,0,41,233,1,0,
        0,0,43,239,1,0,0,0,45,246,1,0,0,0,47,252,1,0,0,0,49,257,1,0,0,0,
        51,261,1,0,0,0,53,272,1,0,0,0,55,276,1,0,0,0,57,280,1,0,0,0,59,285,
        1,0,0,0,61,288,1,0,0,0,63,292,1,0,0,0,65,298,1,0,0,0,67,307,1,0,
        0,0,69,311,1,0,0,0,71,315,1,0,0,0,73,320,1,0,0,0,75,323,1,0,0,0,
        77,326,1,0,0,0,79,329,1,0,0,0,81,332,1,0,0,0,83,335,1,0,0,0,85,337,
        1,0,0,0,87,340,1,0,0,0,89,344,1,0,0,0,91,348,1,0,0,0,93,350,1,0,
        0,0,95,355,1,0,0,0,97,361,1,0,0,0,99,364,1,0,0,0,101,367,1,0,0,0,
        103,369,1,0,0,0,105,371,1,0,0,0,107,373,1,0,0,0,109,376,1,0,0,0,
        111,383,1,0,0,0,113,387,1,0,0,0,115,391,1,0,0,0,117,393,1,0,0,0,
        119,401,1,0,0,0,121,403,1,0,0,0,123,406,1,0,0,0,125,417,1,0,0,0,
        127,426,1,0,0,0,129,436,1,0,0,0,131,132,5,123,0,0,132,2,1,0,0,0,
        133,134,5,125,0,0,134,4,1,0,0,0,135,136,5,58,0,0,136,137,5,61,0,
        0,137,6,1,0,0,0,138,139,5,40,0,0,139,8,1,0,0,0,140,141,5,41,0,0,
        141,10,1,0,0,0,142,143,5,124,0,0,143,144,5,45,0,0,144,145,5,62,0,
        0,145,12,1,0,0,0,146,147,5,46,0,0,147,14,1,0,0,0,148,149,5,124,0,
        0,149,16,1,0,0,0,150,151,5,124,0,0,151,152,5,124,0,0,152,18,1,0,
        0,0,153,154,5,64,0,0,154,20,1,0,0,0,155,156,5,59,0,0,156,22,1,0,
        0,0,157,158,5,67,0,0,158,159,5,79,0,0,159,160,5,78,0,0,160,161,5,
        84,0,0,161,162,5,69,0,0,162,163,5,88,0,0,163,164,5,84,0,0,164,24,
        1,0,0,0,165,166,5,83,0,0,166,167,5,69,0,0,167,168,5,84,0,0,168,169,
        5,83,0,0,169,26,1,0,0,0,170,171,5,67,0,0,171,172,5,79,0,0,172,173,
        5,78,0,0,173,174,5,83,0,0,174,175,5,84,0,0,175,176,5,65,0,0,176,
        177,5,78,0,0,177,178,5,84,0,0,178,179,5,83,0,0,179,28,1,0,0,0,180,
        181,5,69,0,0,181,182,5,78,0,0,182,183,5,68,0,0,183,30,1,0,0,0,184,
        185,5,77,0,0,185,186,5,65,0,0,186,187,5,67,0,0,187,188,5,72,0,0,
        188,189,5,73,0,0,189,190,5,78,0,0,190,191,5,69,0,0,191,32,1,0,0,
        0,192,193,5,83,0,0,193,194,5,69,0,0,194,195,5,69,0,0,195,196,5,83,
        0,0,196,34,1,0,0,0,197,198,5,86,0,0,198,199,5,65,0,0,199,200,5,82,
        0,0,200,201,5,73,0,0,201,202,5,65,0,0,202,203,5,66,0,0,203,204,5,
        76,0,0,204,205,5,69,0,0,205,206,5,83,0,0,206,36,1,0,0,0,207,208,
        5,73,0,0,208,209,5,78,0,0,209,210,5,86,0,0,210,211,5,65,0,0,211,
        212,5,82,0,0,212,213,5,73,0,0,213,214,5,65,0,0,214,215,5,78,0,0,
        215,216,5,84,0,0,216,217,5,83,0,0,217,38,1,0,0,0,218,219,5,73,0,
        0,219,220,5,78,0,0,220,221,5,73,0,0,221,222,5,84,0,0,222,223,5,73,
        0,0,223,224,5,65,0,0,224,225,5,76,0,0,225,226,5,73,0,0,226,227,5,
        83,0,0,227,228,5,65,0,0,228,229,5,84,0,0,229,230,5,73,0,0,230,231,
        5,79,0,0,231,232,5,78,0,0,232,40,1,0,0,0,233,234,5,69,0,0,234,235,
        5,86,0,0,235,236,5,69,0,0,236,237,5,78,0,0,237,238,5,84,0,0,238,
        42,1,0,0,0,239,240,5,87,0,0,240,241,5,69,0,0,241,242,5,73,0,0,242,
        243,5,71,0,0,243,244,5,72,0,0,244,245,5,84,0,0,245,44,1,0,0,0,246,
        247,5,87,0,0,247,248,5,72,0,0,248,249,5,69,0,0,249,250,5,82,0,0,
        250,251,5,69,0,0,251,46,1,0,0,0,252,253,5,84,0,0,253,254,5,72,0,
        0,254,255,5,69,0,0,255,256,5,78,0,0,256,48,1,0,0,0,257,258,5,65,
        0,0,258,259,5,78,0,0,259,260,5,89,0,0,260,50,1,0,0,0,261,262,5,80,
        0,0,262,263,5,82,0,0,263,264,5,79,0,0,264,265,5,80,0,0,265,266,5,
        69,0,0,266,267,5,82,0,0,267,268,5,84,0,0,268,269,5,73,0,0,269,270,
        5,69,0,0,270,271,5,83,0,0,271,52,1,0,0,0,272,273,5,78,0,0,273,274,
        5,97,0,0,274,275,5,116,0,0,275,54,1,0,0,0,276,277,5,73,0,0,277,278,
        5,110,0,0,278,279,5,116,0,0,279,56,1,0,0,0,280,281,5,66,0,0,281,
        282,5,111,0,0,282,283,5,111,0,0,283,284,5,108,0,0,284,58,1,0,0,0,
        285,286,5,42,0,0,286,287,5,42,0,0,287,60,1,0,0,0,288,289,5,80,0,
        0,289,290,5,79,0,0,290,291,5,87,0,0,291,62,1,0,0,0,292,293,5,101,
        0,0,293,294,5,109,0,0,294,295,5,112,0,0,295,296,5,116,0,0,296,297,
        5,121,0,0,297,64,1,0,0,0,298,299,5,101,0,0,299,300,5,109,0,0,300,
        301,5,112,0,0,301,302,5,116,0,0,302,303,5,121,0,0,303,304,5,114,
        0,0,304,305,5,101,0,0,305,306,5,108,0,0,306,66,1,0,0,0,307,308,5,
        100,0,0,308,309,5,111,0,0,309,310,5,109,0,0,310,68,1,0,0,0,311,312,
        5,114,0,0,312,313,5,97,0,0,313,314,5,110,0,0,314,70,1,0,0,0,315,
        316,5,99,0,0,316,317,5,97,0,0,317,318,5,114,0,0,318,319,5,100,0,
        0,319,72,1,0,0,0,320,321,5,60,0,0,321,322,5,124,0,0,322,74,1,0,0,
        0,323,324,5,60,0,0,324,325,5,43,0,0,325,76,1,0,0,0,326,327,5,124,
        0,0,327,328,5,62,0,0,328,78,1,0,0,0,329,330,5,46,0,0,330,331,5,46,
        0,0,331,80,1,0,0,0,332,333,5,60,0,0,333,334,5,58,0,0,334,82,1,0,
        0,0,335,336,5,58,0,0,336,84,1,0,0,0,337,338,5,47,0,0,338,339,5,58,
        0,0,339,86,1,0,0,0,340,341,5,92,0,0,341,342,5,115,0,0,342,343,5,
        47,0,0,343,88,1,0,0,0,344,345,5,47,0,0,345,346,5,115,0,0,346,347,
        5,92,0,0,347,90,1,0,0,0,348,349,5,92,0,0,349,92,1,0,0,0,350,351,
        5,84,0,0,351,352,5,114,0,0,352,353,5,117,0,0,353,354,5,101,0,0,354,
        94,1,0,0,0,355,356,5,70,0,0,356,357,5,97,0,0,357,358,5,108,0,0,358,
        359,5,115,0,0,359,360,5,101,0,0,360,96,1,0,0,0,361,362,5,47,0,0,
        362,363,5,92,0,0,363,98,1,0,0,0,364,365,5,92,0,0,365,366,5,47,0,
        0,366,100,1,0,0,0,367,368,5,43,0,0,368,102,1,0,0,0,369,370,5,45,
        0,0,370,104,1,0,0,0,371,372,5,42,0,0,372,106,1,0,0,0,373,374,5,47,
        0,0,374,108,1,0,0,0,375,377,5,45,0,0,376,375,1,0,0,0,376,377,1,0,
        0,0,377,379,1,0,0,0,378,380,7,0,0,0,379,378,1,0,0,0,380,381,1,0,
        0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,110,1,0,0,0,383,384,3,109,
        54,0,384,385,5,46,0,0,385,386,3,109,54,0,386,112,1,0,0,0,387,388,
        5,109,0,0,388,389,5,111,0,0,389,390,5,100,0,0,390,114,1,0,0,0,391,
        392,5,61,0,0,392,116,1,0,0,0,393,394,5,60,0,0,394,395,5,62,0,0,395,
        118,1,0,0,0,396,402,7,1,0,0,397,398,5,62,0,0,398,402,5,61,0,0,399,
        400,5,60,0,0,400,402,5,61,0,0,401,396,1,0,0,0,401,397,1,0,0,0,401,
        399,1,0,0,0,402,120,1,0,0,0,403,404,5,44,0,0,404,122,1,0,0,0,405,
        407,7,2,0,0,406,405,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,
        409,1,0,0,0,409,410,1,0,0,0,410,411,6,61,0,0,411,124,1,0,0,0,412,
        414,5,13,0,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,
        418,5,10,0,0,416,418,5,13,0,0,417,413,1,0,0,0,417,416,1,0,0,0,418,
        419,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,
        422,6,62,0,0,422,126,1,0,0,0,423,425,5,95,0,0,424,423,1,0,0,0,425,
        428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,
        426,1,0,0,0,429,433,7,3,0,0,430,432,7,4,0,0,431,430,1,0,0,0,432,
        435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,128,1,0,0,0,435,
        433,1,0,0,0,436,440,5,35,0,0,437,439,9,0,0,0,438,437,1,0,0,0,439,
        442,1,0,0,0,440,441,1,0,0,0,440,438,1,0,0,0,441,443,1,0,0,0,442,
        440,1,0,0,0,443,444,7,5,0,0,444,445,1,0,0,0,445,446,6,64,0,0,446,
        130,1,0,0,0,11,0,376,381,401,408,413,417,419,426,433,440,1,6,0,0
    ]

class EventBLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    CONTEXT = 12
    SETS = 13
    CONSTANTS = 14
    END = 15
    MACHINE = 16
    SEES = 17
    VARIABLES = 18
    INVARIANTS = 19
    INITIALISATION = 20
    EVENT = 21
    WEIGHT = 22
    WHERE = 23
    THEN = 24
    ANY = 25
    PROPERTIES = 26
    TyNAT = 27
    TyINT = 28
    TyBOOL = 29
    CARTPROD = 30
    POWERSET = 31
    EMPTY = 32
    EMPTYREL = 33
    DOM = 34
    RAN = 35
    CARD = 36
    DOMRES = 37
    OVERR = 38
    RANRES = 39
    INTRANGE = 40
    INCHOICE = 41
    IN = 42
    NOTIN = 43
    UNION = 44
    INTERSECTION = 45
    SUBSTRACTION = 46
    TRUE = 47
    FALSE = 48
    CONJ = 49
    DISJ = 50
    PLUS = 51
    MINUS = 52
    TIMES = 53
    DIV = 54
    INT = 55
    FLOAT = 56
    MOD = 57
    EQ = 58
    NEQ = 59
    RELSYM = 60
    SEP = 61
    WHITESPACE = 62
    NEWLINE = 63
    ID = 64
    COMMENT = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "':='", "'('", "')'", "'|->'", "'.'", "'|'", "'||'", 
            "'@'", "';'", "'CONTEXT'", "'SETS'", "'CONSTANTS'", "'END'", 
            "'MACHINE'", "'SEES'", "'VARIABLES'", "'INVARIANTS'", "'INITIALISATION'", 
            "'EVENT'", "'WEIGHT'", "'WHERE'", "'THEN'", "'ANY'", "'PROPERTIES'", 
            "'Nat'", "'Int'", "'Bool'", "'**'", "'POW'", "'empty'", "'emptyrel'", 
            "'dom'", "'ran'", "'card'", "'<|'", "'<+'", "'|>'", "'..'", 
            "'<:'", "':'", "'/:'", "'\\s/'", "'/s\\'", "'\\'", "'True'", 
            "'False'", "'/\\'", "'\\/'", "'+'", "'-'", "'*'", "'/'", "'mod'", 
            "'='", "'<>'", "','" ]

    symbolicNames = [ "<INVALID>",
            "CONTEXT", "SETS", "CONSTANTS", "END", "MACHINE", "SEES", "VARIABLES", 
            "INVARIANTS", "INITIALISATION", "EVENT", "WEIGHT", "WHERE", 
            "THEN", "ANY", "PROPERTIES", "TyNAT", "TyINT", "TyBOOL", "CARTPROD", 
            "POWERSET", "EMPTY", "EMPTYREL", "DOM", "RAN", "CARD", "DOMRES", 
            "OVERR", "RANRES", "INTRANGE", "INCHOICE", "IN", "NOTIN", "UNION", 
            "INTERSECTION", "SUBSTRACTION", "TRUE", "FALSE", "CONJ", "DISJ", 
            "PLUS", "MINUS", "TIMES", "DIV", "INT", "FLOAT", "MOD", "EQ", 
            "NEQ", "RELSYM", "SEP", "WHITESPACE", "NEWLINE", "ID", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "CONTEXT", "SETS", "CONSTANTS", 
                  "END", "MACHINE", "SEES", "VARIABLES", "INVARIANTS", "INITIALISATION", 
                  "EVENT", "WEIGHT", "WHERE", "THEN", "ANY", "PROPERTIES", 
                  "TyNAT", "TyINT", "TyBOOL", "CARTPROD", "POWERSET", "EMPTY", 
                  "EMPTYREL", "DOM", "RAN", "CARD", "DOMRES", "OVERR", "RANRES", 
                  "INTRANGE", "INCHOICE", "IN", "NOTIN", "UNION", "INTERSECTION", 
                  "SUBSTRACTION", "TRUE", "FALSE", "CONJ", "DISJ", "PLUS", 
                  "MINUS", "TIMES", "DIV", "INT", "FLOAT", "MOD", "EQ", 
                  "NEQ", "RELSYM", "SEP", "WHITESPACE", "NEWLINE", "ID", 
                  "COMMENT" ]

    grammarFileName = "EventB.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


